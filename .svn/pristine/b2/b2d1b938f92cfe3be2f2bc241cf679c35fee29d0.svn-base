using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NHibernate.Mapping.ByCode;
using NHibernate.Mapping.ByCode.Conformist;

namespace Olfrad.EscuelaSimple.Modelo
{
    public class InasistenciaId
    {
        public virtual uint IdPersonal { get; set; }
        public virtual uint IdInasistencia { get; set; }

        public InasistenciaId()
        {

        }

        public InasistenciaId(uint personal, uint inasistencia)
            : base()
        {
            IdPersonal = personal;
            IdInasistencia = inasistencia;
        }

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            var inasistenciaId = obj as InasistenciaId;
            if (inasistenciaId == null)
            {
                return false;
            }

            return base.Equals(obj)
                && IdPersonal.Equals(inasistenciaId.IdPersonal)
                && IdInasistencia.Equals(inasistenciaId.IdInasistencia);
        }

        public override int GetHashCode()
        {
            return (base.GetHashCode() + '|' + IdPersonal + '|' + IdInasistencia).GetHashCode();
        }
    }

    public class Inasistencia
    {
        public virtual InasistenciaId Id { get; set; }
        public virtual string Motivo { get; set; }
        public virtual DateTime Desde { get; set; }
        public virtual DateTime Hasta { get; set; }

        public Inasistencia()
        {
            Id = new InasistenciaId();
        }
    }

    public class InasistenciaMap : ClassMapping<Inasistencia>
    {
        public InasistenciaMap()
        {
            Table("Inasistencia");

            ComponentAsId<InasistenciaId>(x => x.Id, m =>
            {
                m.Property<uint>(k => k.IdPersonal);
                m.Property<uint>(k => k.IdInasistencia);
            });
            Property<string>(x => x.Motivo, m =>
            {
                m.NotNullable(true);
            });
            Property<DateTime>(x => x.Desde, m =>
            {
                m.NotNullable(true);
            });
            Property<DateTime>(x => x.Hasta, m =>
            {
                m.NotNullable(true);
            });
        }
    }
}
